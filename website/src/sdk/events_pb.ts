// Generated by protoc-gen-grpc-ts-web. DO NOT EDIT!
/* eslint-disable */
/* tslint:disable */

import * as jspb from 'google-protobuf';
import * as grpcWeb from 'grpc-web';

import * as googleProtobufTimestamp from 'google-protobuf/google/protobuf/timestamp_pb';

export class Events {

	private client_ = new grpcWeb.GrpcWebClientBase({
		format: 'text',
	});

	private methodInfoListen = new grpcWeb.MethodDescriptor<ListenEventsReq, ListenEventsRes>(
		"Listen",
		null,
		ListenEventsReq,
		ListenEventsRes,
		(req: ListenEventsReq) => req.serializeBinary(),
		ListenEventsRes.deserializeBinary
	);

	constructor(
		private hostname: string,
		private defaultMetadata?: () => grpcWeb.Metadata,
	) { }

	listen(req: ListenEventsReq.AsObject, metadata?: grpcWeb.Metadata) {
		const message = ListenEventsReqFromObject(req);
		const stream = this.client_.serverStreaming(
			this.hostname + '/protos.Events/Listen',
			message,
			Object.assign({}, this.defaultMetadata ? this.defaultMetadata() : {}, metadata),
			this.methodInfoListen,
		);
		return {
			onError(callback: (err: grpcWeb.Error) => void) {
				stream.on('error', callback);
			},
			onStatus(callback: (status: grpcWeb.Status) => void) {
				stream.on('status', callback);
			},
			onData(callback: (response: ListenEventsRes.AsObject) => void) {
				stream.on('data', (message) => {
					callback(message.toObject());
				});
			},
			onEnd(callback: () => void) {
				stream.on('end', callback);
			},
			cancel() {
				stream.cancel();
			},
		};
	}

}




export declare namespace ListenEventsReq {
	export type AsObject = {
		since?: googleProtobufTimestamp.Timestamp.AsObject,
		until?: googleProtobufTimestamp.Timestamp.AsObject,
	}
}

export class ListenEventsReq extends jspb.Message {

	private static repeatedFields_ = [
		
	];

	constructor(data?: jspb.Message.MessageArray) {
		super();
		jspb.Message.initialize(this, data || [], 0, -1, ListenEventsReq.repeatedFields_, null);
	}


	getSince(): googleProtobufTimestamp.Timestamp {
		return jspb.Message.getWrapperField(this, googleProtobufTimestamp.Timestamp, 1);
	}

	setSince(value?: googleProtobufTimestamp.Timestamp): void {
		(jspb.Message as any).setWrapperField(this, 1, value);
	}

	getUntil(): googleProtobufTimestamp.Timestamp {
		return jspb.Message.getWrapperField(this, googleProtobufTimestamp.Timestamp, 2);
	}

	setUntil(value?: googleProtobufTimestamp.Timestamp): void {
		(jspb.Message as any).setWrapperField(this, 2, value);
	}

	serializeBinary(): Uint8Array {
		const writer = new jspb.BinaryWriter();
		ListenEventsReq.serializeBinaryToWriter(this, writer);
		return writer.getResultBuffer();
	}

	toObject(): ListenEventsReq.AsObject {
		let f: any;
		return {since: (f = this.getSince()) && f.toObject(),
			until: (f = this.getUntil()) && f.toObject(),
			
		};
	}

	static serializeBinaryToWriter(message: ListenEventsReq, writer: jspb.BinaryWriter): void {
		const field1 = message.getSince();
		if (field1 != null) {
			writer.writeMessage(1, field1, googleProtobufTimestamp.Timestamp.serializeBinaryToWriter);
		}
		const field2 = message.getUntil();
		if (field2 != null) {
			writer.writeMessage(2, field2, googleProtobufTimestamp.Timestamp.serializeBinaryToWriter);
		}
	}

	static deserializeBinary(bytes: Uint8Array): ListenEventsReq {
		var reader = new jspb.BinaryReader(bytes);
		var message = new ListenEventsReq();
		return ListenEventsReq.deserializeBinaryFromReader(message, reader);
	}

	static deserializeBinaryFromReader(message: ListenEventsReq, reader: jspb.BinaryReader): ListenEventsReq {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			const field = reader.getFieldNumber();
			switch (field) {
			case 1:
				const field1 = new googleProtobufTimestamp.Timestamp();
				reader.readMessage(field1, googleProtobufTimestamp.Timestamp.deserializeBinaryFromReader);
				message.setSince(field1);
				break;
			case 2:
				const field2 = new googleProtobufTimestamp.Timestamp();
				reader.readMessage(field2, googleProtobufTimestamp.Timestamp.deserializeBinaryFromReader);
				message.setUntil(field2);
				break;
			default:
				reader.skipField();
				break;
			}
		}
		return message;
	}

}
export declare namespace ListenEventsRes {
	export type AsObject = {
		event?: Event.AsObject,
	}
}

export class ListenEventsRes extends jspb.Message {

	private static repeatedFields_ = [
		
	];

	constructor(data?: jspb.Message.MessageArray) {
		super();
		jspb.Message.initialize(this, data || [], 0, -1, ListenEventsRes.repeatedFields_, null);
	}


	getEvent(): Event {
		return jspb.Message.getWrapperField(this, Event, 1);
	}

	setEvent(value?: Event): void {
		(jspb.Message as any).setWrapperField(this, 1, value);
	}

	serializeBinary(): Uint8Array {
		const writer = new jspb.BinaryWriter();
		ListenEventsRes.serializeBinaryToWriter(this, writer);
		return writer.getResultBuffer();
	}

	toObject(): ListenEventsRes.AsObject {
		let f: any;
		return {event: (f = this.getEvent()) && f.toObject(),
			
		};
	}

	static serializeBinaryToWriter(message: ListenEventsRes, writer: jspb.BinaryWriter): void {
		const field1 = message.getEvent();
		if (field1 != null) {
			writer.writeMessage(1, field1, Event.serializeBinaryToWriter);
		}
	}

	static deserializeBinary(bytes: Uint8Array): ListenEventsRes {
		var reader = new jspb.BinaryReader(bytes);
		var message = new ListenEventsRes();
		return ListenEventsRes.deserializeBinaryFromReader(message, reader);
	}

	static deserializeBinaryFromReader(message: ListenEventsRes, reader: jspb.BinaryReader): ListenEventsRes {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			const field = reader.getFieldNumber();
			switch (field) {
			case 1:
				const field1 = new Event();
				reader.readMessage(field1, Event.deserializeBinaryFromReader);
				message.setEvent(field1);
				break;
			default:
				reader.skipField();
				break;
			}
		}
		return message;
	}

}
export declare namespace Event {
	export type AsObject = {
		id: string,
		raw: string,
		output: string,
		priority: string,
		rule: string,
		time?: googleProtobufTimestamp.Timestamp.AsObject,
	}
}

export class Event extends jspb.Message {

	private static repeatedFields_ = [
		
	];

	constructor(data?: jspb.Message.MessageArray) {
		super();
		jspb.Message.initialize(this, data || [], 0, -1, Event.repeatedFields_, null);
	}


	getId(): string {
		return jspb.Message.getFieldWithDefault(this, 1, "");
	}

	setId(value: string): void {
		(jspb.Message as any).setProto3StringField(this, 1, value);
	}

	getRaw(): string {
		return jspb.Message.getFieldWithDefault(this, 2, "");
	}

	setRaw(value: string): void {
		(jspb.Message as any).setProto3StringField(this, 2, value);
	}

	getOutput(): string {
		return jspb.Message.getFieldWithDefault(this, 3, "");
	}

	setOutput(value: string): void {
		(jspb.Message as any).setProto3StringField(this, 3, value);
	}

	getPriority(): string {
		return jspb.Message.getFieldWithDefault(this, 34, "");
	}

	setPriority(value: string): void {
		(jspb.Message as any).setProto3StringField(this, 34, value);
	}

	getRule(): string {
		return jspb.Message.getFieldWithDefault(this, 5, "");
	}

	setRule(value: string): void {
		(jspb.Message as any).setProto3StringField(this, 5, value);
	}

	getTime(): googleProtobufTimestamp.Timestamp {
		return jspb.Message.getWrapperField(this, googleProtobufTimestamp.Timestamp, 6);
	}

	setTime(value?: googleProtobufTimestamp.Timestamp): void {
		(jspb.Message as any).setWrapperField(this, 6, value);
	}

	serializeBinary(): Uint8Array {
		const writer = new jspb.BinaryWriter();
		Event.serializeBinaryToWriter(this, writer);
		return writer.getResultBuffer();
	}

	toObject(): Event.AsObject {
		let f: any;
		return {id: this.getId(),
			raw: this.getRaw(),
			output: this.getOutput(),
			priority: this.getPriority(),
			rule: this.getRule(),
			time: (f = this.getTime()) && f.toObject(),
			
		};
	}

	static serializeBinaryToWriter(message: Event, writer: jspb.BinaryWriter): void {
		const field1 = message.getId();
		if (field1.length > 0) {
			writer.writeString(1, field1);
		}
		const field2 = message.getRaw();
		if (field2.length > 0) {
			writer.writeString(2, field2);
		}
		const field3 = message.getOutput();
		if (field3.length > 0) {
			writer.writeString(3, field3);
		}
		const field34 = message.getPriority();
		if (field34.length > 0) {
			writer.writeString(34, field34);
		}
		const field5 = message.getRule();
		if (field5.length > 0) {
			writer.writeString(5, field5);
		}
		const field6 = message.getTime();
		if (field6 != null) {
			writer.writeMessage(6, field6, googleProtobufTimestamp.Timestamp.serializeBinaryToWriter);
		}
	}

	static deserializeBinary(bytes: Uint8Array): Event {
		var reader = new jspb.BinaryReader(bytes);
		var message = new Event();
		return Event.deserializeBinaryFromReader(message, reader);
	}

	static deserializeBinaryFromReader(message: Event, reader: jspb.BinaryReader): Event {
		while (reader.nextField()) {
			if (reader.isEndGroup()) {
				break;
			}
			const field = reader.getFieldNumber();
			switch (field) {
			case 1:
				const field1 = reader.readString()
				message.setId(field1);
				break;
			case 2:
				const field2 = reader.readString()
				message.setRaw(field2);
				break;
			case 3:
				const field3 = reader.readString()
				message.setOutput(field3);
				break;
			case 34:
				const field34 = reader.readString()
				message.setPriority(field34);
				break;
			case 5:
				const field5 = reader.readString()
				message.setRule(field5);
				break;
			case 6:
				const field6 = new googleProtobufTimestamp.Timestamp();
				reader.readMessage(field6, googleProtobufTimestamp.Timestamp.deserializeBinaryFromReader);
				message.setTime(field6);
				break;
			default:
				reader.skipField();
				break;
			}
		}
		return message;
	}

}


function ListenEventsReqFromObject(obj: ListenEventsReq.AsObject | undefined): ListenEventsReq | undefined {
	if (obj === undefined) {
		return undefined;
	}
	const message = new ListenEventsReq();
	message.setSince(TimestampFromObject(obj.since));
	message.setUntil(TimestampFromObject(obj.until));
	return message;
}

function TimestampFromObject(obj: googleProtobufTimestamp.Timestamp.AsObject | undefined): googleProtobufTimestamp.Timestamp | undefined {
	if (obj === undefined) {
		return undefined;
	}
	const message = new googleProtobufTimestamp.Timestamp();
	message.setSeconds(obj.seconds);
	message.setNanos(obj.nanos);
	return message;
}

function ListenEventsResFromObject(obj: ListenEventsRes.AsObject | undefined): ListenEventsRes | undefined {
	if (obj === undefined) {
		return undefined;
	}
	const message = new ListenEventsRes();
	message.setEvent(EventFromObject(obj.event));
	return message;
}

function EventFromObject(obj: Event.AsObject | undefined): Event | undefined {
	if (obj === undefined) {
		return undefined;
	}
	const message = new Event();
	message.setId(obj.id);
	message.setRaw(obj.raw);
	message.setOutput(obj.output);
	message.setPriority(obj.priority);
	message.setRule(obj.rule);
	message.setTime(TimestampFromObject(obj.time));
	return message;
}

